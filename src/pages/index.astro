---
import Layout from "../layouts/Layout.astro";
import { CA, BUY_URL, TWITTER_URL, TELEGRAM_URL, DEXSCREENER_URL } from "../utils/utils";

---

<Layout
	title=""
	description=""
	keywords=""
	canonicalURL=""
	robots="index, follow"
>
  <!-- seccion 1 -->

  <div class="min-h-screen bg-[url('/heaven.jpg')] bg-cover flex flex-col items-center justify-center py-10">
    <button id="enterHeavenBtn" class="byrd-medium-btn text-4xl font-bold text-white p-4 rounded-full bg-[#d72d0e] shadow-lg hover:bg-[#c52a0d] transition-colors">
      ENTER HEAVEN
    </button>   
  </div>

    <!-- Modal para ver imágenes -->
    <div id="imageModal" class="fixed inset-0 bg-black/80 z-50 hidden items-center justify-center p-4">
      <div class="relative max-w-4xl max-h-full">
        <button id="closeModal" class="absolute -top-12 right-0 text-white text-4xl hover:text-gray-300 transition-colors">
          ×
        </button>
        <img id="modalImage" src="" alt="Meme" class="max-w-full max-h-full object-contain rounded-lg">
      </div>
    </div>

    <!-- Modal para video de Heaven -->
    <div id="videoModal" class="fixed inset-0 bg-black z-[60] hidden items-center justify-center">
      <div class="relative w-full h-full">
        <button id="closeVideoModal" class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300 transition-colors z-10">
          ×
        </button>
        <video id="heavenVideo" class="w-full h-full object-cover" autoplay muted preload="auto">
          <source src="/heaven2.mp4" type="video/mp4">
          Tu navegador no soporta el elemento video.
        </video>
        <audio id="heavenAudio" loop preload="auto">
          <source src="/heaven.mp3" type="audio/mpeg">
          Tu navegador no soporta el elemento audio.
        </audio>
      </div>
    </div>





<style>
  ul {
    list-style-type: none;
    padding-left: 0;
  }

  li {
    padding: 0.75rem 0;
  }

  .hero-image {
    animation: slideUp 1s ease-out forwards;
    transform: translateY(100%);
  }

  @keyframes slideUp {
    to {
      transform: translateY(0);
    }
  }

  .fancy-frame {
    border: 8px solid white;
    border-radius: 12px;
    box-shadow: 
      0 0 0 2px #d72d0e,
      0 0 15px rgba(0,0,0,0.3),
      inset 0 0 15px rgba(0,0,0,0.3);
    transition: transform 0.3s ease;
  }

  .fancy-frame:hover {
    transform: scale(1.02);
  }

  .gradient-text {
    background: linear-gradient(to right, #ffffff, #ffd700);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 2px 10px rgba(255,255,255,0.2);
  }
  
  .byrd-medium-btn {
    font-family: 'ByrdMedium', 'Byrd Fallback', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif !important;
  }
</style>

<style>
    .scroll-container {
      position: relative;
      overflow: hidden;
    }
    
    #scrollContent {
      position: relative;
      transition: transform 0.1s ease-out;
    }
</style>
    
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const scrollContent = document.getElementById('scrollContent');
    if (!scrollContent) return;
    const container = scrollContent.parentElement;
    let lastScrollY = window.scrollY;
    let ticking = false;
    let containerTop = container.offsetTop;
    let containerBottom = containerTop + container.offsetHeight;
    let maxScroll;

    function updatePosition() {
      if (window.innerWidth < 768) return;
      
      if (!scrollContent) return;
      
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const contentHeight = scrollContent.offsetHeight;
      maxScroll = contentHeight - windowHeight;

      if (scrollY >= containerTop && scrollY <= containerBottom - windowHeight) {
        const scrollPercent = (scrollY - containerTop) / (containerBottom - containerTop - windowHeight);
        const translateY = Math.min(maxScroll * scrollPercent, maxScroll);
        
        scrollContent.style.transform = `translateY(${translateY}px)`;
      }
      
      lastScrollY = scrollY;
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(updatePosition);
        ticking = true;
      }
    });

    window.addEventListener('resize', () => {
      containerTop = container.offsetTop;
      containerBottom = containerTop + container.offsetHeight;
      
      if (window.innerWidth < 768) {
        scrollContent.style.transform = 'translateY(0)';
      } else {
        updatePosition();
      }
    });

    updatePosition();
  });
  
  // Enter Heaven button functionality
   document.addEventListener('DOMContentLoaded', () => {
     const enterHeavenBtn = document.getElementById('enterHeavenBtn') as HTMLButtonElement;
     const videoModal = document.getElementById('videoModal');
     const heavenVideo = document.getElementById('heavenVideo') as HTMLVideoElement;
     const heavenAudio = document.getElementById('heavenAudio') as HTMLAudioElement;
     const closeVideoModal = document.getElementById('closeVideoModal');

     // Variables para controlar la carga de medios
     let videoLoaded = false;
     let audioLoaded = false;

     // Deshabilitar el botón inicialmente
     if (enterHeavenBtn) {
       enterHeavenBtn.disabled = true;
       enterHeavenBtn.style.opacity = '0.5';
       enterHeavenBtn.style.cursor = 'not-allowed';
       enterHeavenBtn.textContent = 'CARGANDO...';
     }

     // Función para verificar si ambos medios están cargados
     const checkMediaLoaded = () => {
       if (videoLoaded && audioLoaded && enterHeavenBtn) {
         enterHeavenBtn.disabled = false;
         enterHeavenBtn.style.opacity = '1';
         enterHeavenBtn.style.cursor = 'pointer';
         enterHeavenBtn.textContent = 'ENTER HEAVEN';
       }
     };

     // Event listeners para la carga del video
     if (heavenVideo) {
       heavenVideo.addEventListener('canplaythrough', () => {
         videoLoaded = true;
         checkMediaLoaded();
       });
       
       heavenVideo.addEventListener('error', () => {
         console.error('Error cargando el video');
         if (enterHeavenBtn) {
           enterHeavenBtn.textContent = 'ERROR AL CARGAR';
           enterHeavenBtn.style.opacity = '0.5';
         }
       });
     }

     // Event listeners para la carga del audio
     if (heavenAudio) {
       heavenAudio.addEventListener('canplaythrough', () => {
         audioLoaded = true;
         checkMediaLoaded();
       });
       
       heavenAudio.addEventListener('error', () => {
         console.error('Error cargando el audio');
         if (enterHeavenBtn) {
           enterHeavenBtn.textContent = 'ERROR AL CARGAR';
           enterHeavenBtn.style.opacity = '0.5';
         }
       });
     }

     // Open video modal when clicking Enter Heaven button
     enterHeavenBtn?.addEventListener('click', () => {
       videoModal?.classList.remove('hidden');
       videoModal?.classList.add('flex');
       document.body.style.overflow = 'hidden';
       
       // Play video from beginning
       if (heavenVideo) {
         heavenVideo.currentTime = 0;
         heavenVideo.play();
       }
       
       // Play audio in loop starting from second 1
        if (heavenAudio) {
          heavenAudio.currentTime = 1;
          heavenAudio.play();
        }
     });

     // Close video modal
     const closeVideoModalFunction = () => {
       videoModal?.classList.add('hidden');
       videoModal?.classList.remove('flex');
       document.body.style.overflow = 'auto';
       
       // Pause and reset video
       if (heavenVideo) {
         heavenVideo.pause();
         heavenVideo.currentTime = 0;
       }
       
       // Pause and reset audio
        if (heavenAudio) {
          heavenAudio.pause();
          heavenAudio.currentTime = 1;
        }
     };

    closeVideoModal?.addEventListener('click', closeVideoModalFunction);

    // Close video modal when clicking outside the video
    videoModal?.addEventListener('click', (e) => {
      if (e.target === videoModal) {
        closeVideoModalFunction();
      }
    });

    // Close video modal with ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && videoModal && !videoModal.classList.contains('hidden')) {
        closeVideoModalFunction();
      }
    });
  });

  // Modal functionality for memes
   document.addEventListener('DOMContentLoaded', () => {
     const modal = document.getElementById('imageModal');
     const modalImage = document.getElementById('modalImage') as HTMLImageElement;
     const closeModal = document.getElementById('closeModal');
     const memeItems = document.querySelectorAll('.meme-item');
     
     // Open modal when clicking on meme items
     memeItems.forEach(item => {
       item.addEventListener('click', () => {
         const imageUrl = item.getAttribute('data-image');
         if (modalImage && imageUrl) {
           modalImage.src = imageUrl;
         }
         modal?.classList.remove('hidden');
         modal?.classList.add('flex');
         document.body.style.overflow = 'hidden';
       });
     });
    
    // Close modal
     const closeModalFunction = () => {
       modal?.classList.add('hidden');
       modal?.classList.remove('flex');
       document.body.style.overflow = 'auto';
     };
     
     closeModal?.addEventListener('click', closeModalFunction);
     
     // Close modal when clicking outside the image
      modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModalFunction();
        }
      });
      
      // Close modal with ESC key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
          closeModalFunction();
        }
      });
    });
</script>