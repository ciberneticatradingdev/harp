---
import Layout from "../layouts/Layout.astro";
import { CA, BUY_URL, TWITTER_URL, TELEGRAM_URL, DEXSCREENER_URL, CONTRACT_ADDRESS } from "../utils/utils";

---

<Layout
	title="Harp on Heaven $HARP | Divine Memecoin - Enter the Heavenly Journey"
	description="Join Harp on Heaven $HARP, the divine memecoin that takes you on a celestial journey. Experience the ultimate crypto adventure in paradise."
	keywords="harp on heaven, $harp, harp token, memecoin, crypto, divine memecoin, heavenly token, celestial crypto, paradise token, heaven memecoin"
	canonicalURL="https://heaven.xyz"
	robots="index, follow"
>
  <!-- seccion 1 -->

  <div class="min-h-screen bg-[url('/heaven.jpeg')] bg-cover bg-center flex flex-col items-center justify-center py-10">
    <button id="enterHeavenBtn" class="byrd-medium-btn text-3xl -mt-12 font-bold text-white p-6 px-12 bg-blue-300/90  transition-all duration-300 transform hover:scale-105  relative overflow-hidden">
      <span class="relative z-10 drop-shadow-lg">LISTEN TO HEAVEN</span>
      <div class="absolute inset-0 bg-gradient-to-r from-transparent via-yellow-200/20 to-transparent animate-pulse"></div>
    </button>   
  </div>

  <!-- About Harp in Heaven Section -->
  <div class="min-h-screen bg-gradient-to-b from-sky-400 via-blue-500 to-indigo-600 flex items-center justify-center py-20">
    <div class="max-w-4xl mx-auto px-6 text-center">
      <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-12 border border-white/20 shadow-2xl">
        <div class="mb-8">
          <img src="/heaven.svg" alt="Heaven" class="w-24 h-24 mx-auto mb-6 opacity-90">
          <h2 class="text-5xl font-bold text-white mb-6 gradient-text">About Harp in Heaven</h2>
        </div>
        
        <div class="space-y-6 text-white/90 text-lg leading-relaxed">
          <p class="text-xl font-semibold text-yellow-200">
            The Divine Sound of Paradise
          </p>
          
          <p>
            Harp in Heaven ($HARP) is not just another token â€“ it's an <strong>indispensable part of the Heaven ecosystem</strong>. 
            Like the celestial melodies that fill the heavenly realm, $HARP brings harmony and divine resonance to our community.
          </p>
          
          <p>
            <em>"Heaven without a harp is not heavenly."</em> This ancient truth guides our mission. The ethereal sounds of the harp 
            have always been synonymous with paradise, creating the perfect soundtrack for souls ascending to eternal bliss.
          </p>
          
          <p>
            Through $HARP, we're building more than a memecoin â€“ we're crafting a <strong>heavenly experience</strong> where 
            every holder becomes part of the celestial orchestra. Join us in creating the most divine crypto journey ever conceived.
          </p>
          
          <div class="mt-8 p-6 bg-gradient-to-r from-yellow-400/20 to-yellow-600/20 rounded-2xl border border-yellow-400/30">
            <p class="text-yellow-200 font-semibold text-xl">
              ðŸŽµ Experience the Divine â€¢ Join the Heavenly Symphony â€¢ Ascend with $HARP ðŸŽµ
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

    <!-- Modal para ver imÃ¡genes -->
    <div id="imageModal" class="fixed inset-0 bg-black/80 z-50 hidden items-center justify-center p-4">
      <div class="relative max-w-4xl max-h-full">
        <button id="closeModal" class="absolute -top-12 right-0 text-white text-4xl hover:text-gray-300 transition-colors">
          Ã—
        </button>
        <img id="modalImage" src="" alt="Meme" class="max-w-full max-h-full object-contain rounded-lg">
      </div>
    </div>

    <!-- Modal para video de Heaven -->
    <div id="videoModal" class="fixed inset-0 bg-black z-[60] hidden items-center justify-center">
      <div class="relative w-full h-full">
        <button id="closeVideoModal" class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300 transition-colors z-10">
          Ã—
        </button>
        <video id="heavenVideo" class="w-full h-full object-cover" autoplay muted preload="auto" playsinline webkit-playsinline>
          <source src="/heaven.mp4" type="video/mp4">
          Your browser does not support the video element.
        </video>
        <audio id="heavenAudio" loop preload="auto">
          <source src="/heaven.mp3" type="audio/mpeg">
          Your browser does not support the audio element.
        </audio>
        
        <!-- End of video overlay elements -->
        <div id="videoEndOverlay" class="absolute inset-0 bg-black/50 hidden items-center justify-center flex-col z-20">
          <div class="text-center space-y-8 p-8 max-w-2xl">
            <!-- Title -->
            <h1 class="text-4xl md:text-6xl font-bold text-white mb-8 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out" id="endTitle">
              HARP ON HEAVEN
            </h1>
            
            <!-- Contract Address Section -->
            <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out" id="contractSection" style="transition-delay: 0.5s;">
              <h2 class="text-2xl font-semibold text-white mb-4">Contract Address</h2>
              <div class="flex items-center justify-between bg-black/30 rounded-lg p-4">
                <span class="text-white font-mono text-sm break-all" id="contractAddress">CA WILL UPDATE SOON</span>
                <button id="copyAddressBtn" class="ml-4 bg-gradient-to-r from-yellow-400 to-yellow-600 text-black px-4 py-2 rounded-lg hover:from-yellow-300 hover:to-yellow-500 transition-all duration-300 font-semibold">
                  COPY
                </button>
              </div>
            </div>
            
            <!-- Social Links -->
            <div class="flex justify-center space-x-6 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out" id="socialLinks" style="transition-delay: 1s;">

              <a href={TWITTER_URL} target="_blank" class="bg-transparent  p-3 rounded-full transition-all duration-300 transform hover:scale-105">
                <img src="/social/silver-x.png" alt="X (Twitter)" class="w-16 h-16">
              </a>
              <a href={DEXSCREENER_URL} target="_blank" class="bg-transparent  p-3 rounded-full transition-all duration-300 transform hover:scale-105">
                <img src="/social/dexscreener.png" alt="DexScreener" class="w-16 h-16">
              </a>
            </div>
            
            <!-- Additional Info -->
            <div class="text-center opacity-0 transform translate-y-10 transition-all duration-1000 ease-out" id="additionalInfo" style="transition-delay: 1.5s;">
              <p class="text-white/80 text-lg mb-4">JOIN THE HEAVENLY JOURNEY</p>
              <div class="flex items-center justify-center space-x-2">
                <img src="/heaven.svg" alt="Heaven" class="w-12 h-12">
                <p class="text-white/60 text-sm">only on heaven.xyz</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>





<style>
  ul {
    list-style-type: none;
    padding-left: 0;
  }

  li {
    padding: 0.75rem 0;
  }

  .hero-image {
    animation: slideUp 1s ease-out forwards;
    transform: translateY(100%);
  }

  @keyframes slideUp {
    to {
      transform: translateY(0);
    }
  }

  .fancy-frame {
    border: 8px solid white;
    border-radius: 12px;
    box-shadow: 
      0 0 0 2px #d72d0e,
      0 0 15px rgba(0,0,0,0.3),
      inset 0 0 15px rgba(0,0,0,0.3);
    transition: transform 0.3s ease;
  }

  .fancy-frame:hover {
    transform: scale(1.02);
  }

  .gradient-text {
    background: linear-gradient(to right, #ffffff, #ffd700);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 2px 10px rgba(255,255,255,0.2);
  }
  
  .byrd-medium-btn {
    font-family: 'ByrdMedium', 'Byrd Fallback', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif !important;
  }

  .heavenly-button {
    box-shadow: 
      0 0 30px rgba(255, 215, 0, 0.4),
      0 0 60px rgba(135, 206, 235, 0.3),
      0 8px 32px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
  }

  .heavenly-button:hover {
    box-shadow: 
      0 0 40px rgba(255, 215, 0, 0.6),
      0 0 80px rgba(135, 206, 235, 0.5),
      0 12px 40px rgba(0, 0, 0, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.4);
  }

  @keyframes heavenlyGlow {
    0%, 100% {
      box-shadow: 
        0 0 30px rgba(255, 215, 0, 0.4),
        0 0 60px rgba(135, 206, 235, 0.3),
        0 8px 32px rgba(0, 0, 0, 0.3);
    }
    50% {
      box-shadow: 
        0 0 50px rgba(255, 215, 0, 0.6),
        0 0 100px rgba(135, 206, 235, 0.5),
        0 8px 32px rgba(0, 0, 0, 0.3);
    }
  }

  .heavenly-button {
    animation: heavenlyGlow 3s ease-in-out infinite;
  }
</style>

<style>
    .scroll-container {
      position: relative;
      overflow: hidden;
    }
    
    #scrollContent {
      position: relative;
      transition: transform 0.1s ease-out;
    }
</style>
    
<script define:vars={{ contractAddress: CA }}>
  document.addEventListener('DOMContentLoaded', () => {
    const scrollContent = document.getElementById('scrollContent');
    if (!scrollContent) return;
    const container = scrollContent.parentElement;
    let lastScrollY = window.scrollY;
    let ticking = false;
    let containerTop = container.offsetTop;
    let containerBottom = containerTop + container.offsetHeight;
    let maxScroll;

    function updatePosition() {
      if (window.innerWidth < 768) return;
      
      if (!scrollContent) return;
      
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const contentHeight = scrollContent.offsetHeight;
      maxScroll = contentHeight - windowHeight;

      if (scrollY >= containerTop && scrollY <= containerBottom - windowHeight) {
        const scrollPercent = (scrollY - containerTop) / (containerBottom - containerTop - windowHeight);
        const translateY = Math.min(maxScroll * scrollPercent, maxScroll);
        
        scrollContent.style.transform = `translateY(${translateY}px)`;
      }
      
      lastScrollY = scrollY;
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(updatePosition);
        ticking = true;
      }
    });

    window.addEventListener('resize', () => {
      containerTop = container.offsetTop;
      containerBottom = containerTop + container.offsetHeight;
      
      if (window.innerWidth < 768) {
        scrollContent.style.transform = 'translateY(0)';
      } else {
        updatePosition();
      }
    });

    updatePosition();
  });
  
  // Enter Heaven button functionality
   document.addEventListener('DOMContentLoaded', () => {
     // Contract Address is now available from define:vars
     
     const enterHeavenBtn = document.getElementById('enterHeavenBtn');
     const videoModal = document.getElementById('videoModal');
     const heavenVideo = document.getElementById('heavenVideo');
     const heavenAudio = document.getElementById('heavenAudio');
     const closeVideoModal = document.getElementById('closeVideoModal');

     // Variables para controlar la carga de medios
     let videoLoaded = false;
     let audioLoaded = false;
     let loadingTimeout = null;
     let overlayTimeout = null;

     // Deshabilitar el botÃ³n inicialmente
     if (enterHeavenBtn) {
       enterHeavenBtn.disabled = true;
       enterHeavenBtn.style.opacity = '0.5';
       enterHeavenBtn.style.cursor = 'not-allowed';
       enterHeavenBtn.textContent = 'LOADING...';
     }

     // FunciÃ³n para habilitar el botÃ³n (con o sin medios cargados)
     const enableButton = () => {
       if (enterHeavenBtn) {
         enterHeavenBtn.disabled = false;
         enterHeavenBtn.style.opacity = '1';
         enterHeavenBtn.style.cursor = 'pointer';
         enterHeavenBtn.textContent = 'LISTEN TO HEAVEN';
       }
       if (loadingTimeout) {
         clearTimeout(loadingTimeout);
         loadingTimeout = null;
       }
     };

     // FunciÃ³n para verificar si ambos medios estÃ¡n cargados
     const checkMediaLoaded = () => {
       if (videoLoaded && audioLoaded) {
         enableButton();
       }
     };

     // Timeout de seguridad: habilitar el botÃ³n despuÃ©s de 10 segundos mÃ¡ximo
     loadingTimeout = setTimeout(() => {
       console.warn('Media loading timeout - enabling button anyway');
       enableButton();
     }, 10000);

     // Fallback adicional: intentar habilitar despuÃ©s de 3 segundos si al menos uno cargÃ³
      setTimeout(() => {
        if ((videoLoaded || audioLoaded) && enterHeavenBtn && enterHeavenBtn.disabled) {
          console.warn('Partial media loading - enabling button');
          enableButton();
        }
      }, 3000);

     // Event listeners for video loading
     if (heavenVideo) {
       heavenVideo.addEventListener('canplaythrough', () => {
         videoLoaded = true;
         checkMediaLoaded();
       });
       
       heavenVideo.addEventListener('error', () => {
         console.error('Error loading video');
         // Habilitar el botÃ³n incluso si hay error, para no bloquear la experiencia
         setTimeout(() => {
           enableButton();
         }, 1000);
       });
       
       // Event listener for when video ends - loop the video
       heavenVideo.addEventListener('ended', () => {
         heavenVideo.currentTime = 0;
         heavenVideo.play();
       });
     }

     // Event listeners for audio loading
     if (heavenAudio) {
       heavenAudio.addEventListener('canplaythrough', () => {
         audioLoaded = true;
         checkMediaLoaded();
       });
       
       heavenAudio.addEventListener('error', () => {
         console.error('Error loading audio');
         // Habilitar el botÃ³n incluso si hay error, para no bloquear la experiencia
         setTimeout(() => {
           enableButton();
         }, 1000);
       });
     }

     // Open video modal when clicking Enter Heaven button
     enterHeavenBtn?.addEventListener('click', () => {
       videoModal?.classList.remove('hidden');
       videoModal?.classList.add('flex');
       document.body.style.overflow = 'hidden';
       
       // Play video from beginning
       if (heavenVideo) {
         heavenVideo.currentTime = 0;
         heavenVideo.play();
       }
       
       // Play audio in loop starting from second 5
        if (heavenAudio) {
          heavenAudio.currentTime = 5;
          heavenAudio.play();
        }
        
        // Show overlay after 3 seconds
        overlayTimeout = setTimeout(() => {
          showVideoEndOverlay();
        }, 3000);
     });

     // Close video modal
     const closeVideoModalFunction = () => {
       videoModal?.classList.add('hidden');
       videoModal?.classList.remove('flex');
       document.body.style.overflow = 'auto';
       
       // Cancel overlay timeout if it's still pending
       if (overlayTimeout) {
         clearTimeout(overlayTimeout);
         overlayTimeout = null;
       }
       
       // Hide and reset video end overlay
       const overlay = document.getElementById('videoEndOverlay');
       if (overlay) {
         overlay.classList.add('hidden');
         overlay.classList.remove('flex');
         
         // Reset all animations
         const elementsToReset = ['endTitle', 'contractSection', 'socialLinks', 'additionalInfo'];
         elementsToReset.forEach(id => {
           const element = document.getElementById(id);
           if (element) {
             element.style.opacity = '0';
             element.style.transform = 'translateY(40px)';
           }
         });
       }
       
       // Pause and reset video
       if (heavenVideo) {
         heavenVideo.pause();
         heavenVideo.currentTime = 0;
       }
       
       // Pause and reset audio
        if (heavenAudio) {
          heavenAudio.pause();
          heavenAudio.currentTime = 5;
        }
     };

    closeVideoModal?.addEventListener('click', closeVideoModalFunction);

    // Close video modal when clicking outside the video
    videoModal?.addEventListener('click', (e) => {
      if (e.target === videoModal) {
        closeVideoModalFunction();
      }
    });

    // Close video modal with ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && videoModal && !videoModal.classList.contains('hidden')) {
        closeVideoModalFunction();
      }
    });
    
    // Function to show video end overlay with animations
    const showVideoEndOverlay = () => {
      const overlay = document.getElementById('videoEndOverlay');
      const endTitle = document.getElementById('endTitle');
      const contractSection = document.getElementById('contractSection');
      const socialLinks = document.getElementById('socialLinks');
      const additionalInfo = document.getElementById('additionalInfo');
      const contractAddressElement = document.getElementById('contractAddress');
      
      // Update contract address display
      if (contractAddressElement) {
        contractAddressElement.textContent = contractAddress;
      }
      
      if (overlay) {
        overlay.classList.remove('hidden');
        overlay.classList.add('flex');
        
        // Animate elements with staggered delays
        setTimeout(() => {
          if (endTitle) {
            endTitle.style.opacity = '1';
            endTitle.style.transform = 'translateY(0)';
          }
        }, 100);
        
        setTimeout(() => {
          if (contractSection) {
            contractSection.style.opacity = '1';
            contractSection.style.transform = 'translateY(0)';
          }
        }, 600);
        
        setTimeout(() => {
          if (socialLinks) {
            socialLinks.style.opacity = '1';
            socialLinks.style.transform = 'translateY(0)';
          }
        }, 1100);
        
        setTimeout(() => {
          if (additionalInfo) {
            additionalInfo.style.opacity = '1';
            additionalInfo.style.transform = 'translateY(0)';
          }
        }, 1600);
      }
    };
    
    // Copy contract address functionality
    const copyAddressBtn = document.getElementById('copyAddressBtn');
    const contractAddressElement2 = document.getElementById('contractAddress');
    
    copyAddressBtn?.addEventListener('click', async () => {
      if (contractAddressElement2) {
        try {
          await navigator.clipboard.writeText(contractAddress);
          const originalText = copyAddressBtn.textContent;
          copyAddressBtn.textContent = 'COPIED!';
          copyAddressBtn.style.background = 'linear-gradient(to right, #10b981, #059669)';
          
          setTimeout(() => {
            copyAddressBtn.textContent = originalText;
            copyAddressBtn.style.background = 'linear-gradient(to right, #fbbf24, #d97706)';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy: ', err);
          copyAddressBtn.textContent = 'FAILED';
          setTimeout(() => {
            copyAddressBtn.textContent = 'COPY';
          }, 2000);
        }
      }
    });
  });

  // Modal functionality for memes
   document.addEventListener('DOMContentLoaded', () => {
     const modal = document.getElementById('imageModal');
     const modalImage = document.getElementById('modalImage');
     const closeModal = document.getElementById('closeModal');
     const memeItems = document.querySelectorAll('.meme-item');
     
     // Open modal when clicking on meme items
     memeItems.forEach(item => {
       item.addEventListener('click', () => {
         const imageUrl = item.getAttribute('data-image');
         if (modalImage && imageUrl) {
           modalImage.src = imageUrl;
         }
         modal?.classList.remove('hidden');
         modal?.classList.add('flex');
         document.body.style.overflow = 'hidden';
       });
     });
    
    // Close modal
     const closeModalFunction = () => {
       modal?.classList.add('hidden');
       modal?.classList.remove('flex');
       document.body.style.overflow = 'auto';
     };
     
     closeModal?.addEventListener('click', closeModalFunction);
     
     // Close modal when clicking outside the image
      modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModalFunction();
        }
      });
      
      // Close modal with ESC key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
          closeModalFunction();
        }
      });
    });
</script>